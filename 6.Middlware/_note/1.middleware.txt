# Type of middleware:
    - custom self defined middleware
    - pre-defined core middleware
    - third-party external middleware

# Way to use middleware:
    - server.use(middleware_name) //App level middleware
    - server.get('/route-url', middleware_name, callback) //Route level middleware

# Route level middleware for certain mentioned routes request.(middleware for specific routes)
# App level middleware for all routes request.( middleware for all routes)

- middleware process http request before sending response.
- middleware either response error|resources, redirect to next middleware|route
- middleware modify the http request,
- sequesnce of middleware matters,
- custome middleware && express built-in middleware && third party-middleware.
- custome middleware can be a call back with three params(req, res, next)
- next route to next futher process, if no next it will just freez keep on loading,
- pre exist middleware in market: body-parser, express.static, morgan, session
- middleware kind of filter or modifies the http request.
- morgan, session
- middleware is just a simple nodejs function that processes http request,
- .use() function of express(), is used to setup middleware(mount the specified middleware function(s) at the path which is being specified.)
- server.use("path", callback)

- app.use(express.static(staticPath)); //built-in express middleware to show static views.
- app.get("/", middleware, (req, res) => {}) //custom-middleware
- app.use('/', (req,res)=>res.send("Landing page!")); //calling landing route callback as middleware.
- app.use(middleware_1)
- app.use(middleware_2)
- app.use(middleware_3)
- app.use(middleware_1,middleware_2,middleware_3)
- app.get("/", middleware, (req, res) => {}) ==> use middleware on /landing route request.
- app.get("/profile", middleware, (req, res) => {}) ==> use middleware on /profile route request.
- app.get(middleware, (req, res) => {}) ==> use middleware on all route request.
- app.get("/", middleware_1, middleware_2, middleware_3, (req, res) => {})
- Like traditional function expressions, arrow functions are not hoisted, and so you cannot call them before you declare them.

- const bodyParser = require('body-parser');
- server.use(bodyParser.urlencoded({ extended: true }))
    * make sure every text including definite signs is encoded properly when retriving form fields.

- Deploy/Host server| Run server: node server.js --> server.listen() --> Url searched in Browser ->  Middleware -> server.get("/", ()=>{})
